class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        Arrays.sort(nums);
        int idx = 0;
        boolean[] visited = new boolean[nums.length];
        recall(nums, new Stack<Integer>(), res, visited, idx);
        return res;
    }

    public void recall(int[] nums, Stack<Integer> subset, List<List<Integer>> res,boolean[] visited, int idx) {
        if (idx == nums.length) {
            res.add(new ArrayList<>(subset));
            return;
        }
        for (int i = 0;i < nums.length;i++) {
            if ((i > 0 && nums[i] == nums[i-1] && !visited[i-1]) || visited[i]) continue;
            subset.push(nums[i]);
            visited[i] = true;
            recall(nums, subset, res, visited, idx+1);
            visited[i] = false;
            subset.pop();
        }
    }

}